{
    "contents" : "corr <- function(directory, threshold=0){\n  files_list <- list.files(directory, full.names=TRUE)\n  data <- data.frame()\n  for (i in 1:threshold){\n    data <- rbind(data, read.csv(files_list[i]))\n  }\n  data_comp <- data[complete.cases(data),]\n  cr <- cor(data_comp[,\"nitrate\"], data_comp[,\"sulfate\"])\n  cr\n}\n\n## this isn't giving me what I want, because it is calling the first 150 files\n## should be the first 150 complete cases makes the threshold!\ncorr <- function(directory, threshold=0){\n  files_list <- list.files(directory, full.names=TRUE)\n  data <- data.frame()\n  for (i in 1:threshold){\n    data <- rbind(data, read.csv(files_list[i]))\n  }\n  data_comp <- data[complete.cases(data),]\n  thres_data <- data_comp[1:150,]\n  cr <- cor(thres_data[,\"nitrate\"], thres_data[,\"sulfate\"])\n  cr\n}\n## still not working because: It has to test the MONITORS\n## ie monitors must have above the threshold number of complete cases, to be included in the correlation\n\n## here is how to just get one of them:\nfiles_list <- list.files(directory, full.names=TRUE)\ndata <- data.frame()\ndata <- rbind(data, read.csv(files_list[2]))\ndata_comp <- data[complete.cases(data),] ## this line will be taken care of when doing multiple I think\ncr <- cor(thres_data[,\"nitrate\"], thres_data[,\"sulfate\"])\n\n## so here is what we need to do:\n## 1) Evaluate each file for meeting the threshold of complete cases( use complete.R for this)\n## 2) Take the above threshold files and get the cor value for all of them, idividually\n## 3) put each of these values into an object, using the subset with a loop i think\n## 3) get it to return those values, enabling a vector with multiple entries\n\ncorr <- function(directory, threshold=0){\n  comp_list <- complete(directory, 1:10)\n  files_list <- list.files(directory, full.names=TRUE)\n  corr_values<- vector(mode=\"numeric\")\n  for (i in 1:10) {\n    if (comp_list[i,\"nobs\"]>= threshold){ ## something is wrong in this if statement\n      abv_thres <- read.csv(files_list[i])\n      corr_values[i] <- cor(abv_thres[,\"sulfate\"], abv_thres[,\"nitrate\"], use=\"complete.obs\")\n      } else {\n        print(\"that didn't work\")\n      }\n    }\n  corr_values\n}\n\n## seems like my if statmetn isn't working. I'm going to try to just run a simple *if*\n## to test my ability to write *if* statements\n\nif (comp_list[1,\"nobs\"]>= threshold){\n  print(\"I should use this file\")\n} else {\n  print(\"this file is shit\")\n}\n\nif (comp_list[i,\"nobs\"] >= threshold) {\n  abv_thres <- read.csv(files_list[i])\n  corr_values[i] <- cor(abv_thres[,\"sulfate\"], abv_thres[,\"nitrate\"])\n} else\n  \n  ## okay the corr function appears to work except for one flaw: it returns NA's\n  ## for values that don't match. This occurs because it reads in within the if,\n  ## what if I take the cor out of the original for and do another loop, using just\n  ## the correct ID numbers.\n  \n  corr <- function(directory, threshold=0){\n    comp_list <- complete(directory, 1:10)\n    files_list <- list.files(directory, full.names=TRUE)\n    corr_values<- vector(mode=\"numeric\")\n    abv_thres <- data.frame(mode=\"numeric\")\n    for (i in 1:10) {\n      if (comp_list[i,\"nobs\"]>= threshold){ ## something is wrong in this if statement\n        abv_thres[i] <- read.csv(files_list[i])\n        if (abv_thres[i]!= NA) {\n          i <- i-1\n          corr_values[i] <- cor(abv_thres[,\"sulfate\"], abv_thres[,\"nitrate\"], use=\"complete.obs\")\n          i <- i+1\n        }\n      } else {\n        print(\"that didn't work\")\n      }\n    }\n    for (i in 1:10)\n    corr_values\n  }\n\n## It seems I have hit a road block. I think perhaps I need to do the inital loop differntly\n## so I am going to try to first, determine which ID's are above threshold\n## take those that are now above threshold, and read into a new list of ID's\n## that the new list and read into abv_thres hold file\n## make the corr values with the new abv_thres file\n\n## hold on trying something else first... What if I don't subset abv_thres. I don't\n## care if is overwritten because it gets used immediatly.\ncorr <- function(directory, threshold=0){\n  comp_list <- complete(directory, 1:10)\n  files_list <- list.files(directory, full.names=TRUE)\n  corr_values<- vector(mode=\"numeric\")\n  abv_thres <- data.frame(date=NA, sulfate=NA, nitrate=NA, ID=NA)## what if I make this the exact same as a potentail file\n  for (i in 1:10) {\n    if (comp_list[i,\"nobs\"]>= threshold){\n      abv_thres <- read.csv(files_list[i])\n      if (abv_thres[i]!= NA) { ## AHA! this expression can't work\n        i <- i-1\n        corr_values[i] <- cor(abv_thres[,\"sulfate\"], abv_thres[,\"nitrate\"], use=\"complete.obs\")\n        i <- i+1\n      }\n    } else {\n      print(\"that didn't work\")\n    }\n  }\n  for (i in 1:10)\n    corr_values\n}\n\n## lets fix that if expression\n\ncorr <- function(directory, threshold=0){\n  comp_list <- complete(directory, 1:332)\n  files_list <- list.files(directory, full.names=TRUE)\n  corr_values<- vector(mode=\"numeric\")\n  abv_thres <- data.frame(date=NA, sulfate=NA, nitrate=NA, ID=NA)## what if I make this the exact same as a potentail file\n  for (i in 1:332) {\n    if (comp_list[i,\"nobs\"]>= threshold){\n      abv_thres <- read.csv(files_list[i])\n      if (is.na(abv_thres[1,4]) != TRUE) { ## AHA! this expression can't work\n        i <- i-1\n        corr_values[i] <- cor(abv_thres[,\"sulfate\"], abv_thres[,\"nitrate\"], use=\"complete.obs\")\n        i <- i+1\n      }\n    } else {\n      print(\"that didn't work\")\n    }\n  }\n    corr_values\n}\n\n## the above works, but places NA's at IDs that don't pass threshold\n## so this is going to have to be rewritten, although it works in theory\n\n\ncorr_values[i] <- cor(abv_thres[,\"sulfate\"], abv_thres[,\"nitrate\"], use=\"complete.obs\")",
    "created" : 1421201597834.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2202280889",
    "id" : "1913620C",
    "lastKnownWriteTime" : 1421281164,
    "path" : "C:/Users/cferguson/Desktop/Coursera/R-Programming/week2/corr_inprogress.R",
    "project_path" : "corr_inprogress.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}